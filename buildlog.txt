# Bake Begins!
### (1 of 6) Copy sources
$ cp -a /home/travis/build/fontdirectory/pecita/METADATA.json /home/travis/build/fontdirectory/pecita/builds/build
$ cp -a /home/travis/build/fontdirectory/pecita/DESCRIPTION.en_us.html /home/travis/build/fontdirectory/pecita/builds/build
$ cp -a Pecita.ttf.ttx src/Pecita.otf.ttx Pecita.ttf._n_a_m_e.ttx Pecita.ttf._g_l_y_f.ttx Pecita.ttf._p_o_s_t.ttx Pecita.ttf.G_P_O_S_.ttx Pecita.ttf.G_S_U_B_.ttx Pecita.ttf._h_h_e_a.ttx Pecita.ttf.O_S_2f_2.ttx Pecita.ttf._p_r_e_p.ttx Pecita.ttf.G_D_E_F_.ttx Pecita.ttf._f_p_g_m.ttx Pecita.ttf._h_e_a_d.ttx Pecita.ttf.F_F_T_M_.ttx Pecita.ttf._h_m_t_x.ttx Pecita.ttf._c_v_t.ttx Pecita.ttf._g_a_s_p.ttx Pecita.ttf._c_m_a_p.ttx Pecita.ttf.D_S_I_G_.ttx Pecita.ttf.GlyphOrder.ttx Pecita.ttf._l_o_c_a.ttx Pecita.ttf._m_a_x_p.ttx src/Pecita.otf.C_F_F_.ttx src/Pecita.otf.G_S_U_B_.ttx src/Pecita.otf._n_a_m_e.ttx src/Pecita.otf.D_S_I_G_.ttx src/Pecita.otf.G_D_E_F_.ttx src/Pecita.otf._c_m_a_p.ttx src/Pecita.otf._h_h_e_a.ttx src/Pecita.otf._h_m_t_x.ttx src/Pecita.otf.GlyphOrder.ttx src/Pecita.otf._p_o_s_t.ttx src/Pecita.otf.O_S_2f_2.ttx src/Pecita.otf._h_e_a_d.ttx src/Pecita.otf._m_a_x_p.ttx src/Pecita.otf.G_P_O_S_.ttx src/Pecita.otf.F_F_T_M_.ttx /home/travis/build/fontdirectory/pecita/builds/build/sources
### (2 of 6) pyfontaine
### (3 of 6) Run upstream tests
$ fontbakery-check.py upstream-repo sources
$ fontaine --collections subsets --text /home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita.ttf.ttx /home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita.otf.ttx > fontaine.txt
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_component(): OK
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_mark_to_mark(): OK
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_own_glyphs(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_bakery_yaml_exists(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_copyright_notices_same_across_family(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_description_html_exists(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_fontlog_txt_exists(): FAIL
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_metadata_json_exists(): OK
WARNING: Please install [PyICU](https://pypi.python.org/pypi/PyICU) toenable [feature], perhaps with: pip install pyicu
end of pyfontaine process
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_prepolation_glyph_contours(): OK
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_prepolation_glyph_points(): OK
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_test_prepolation_glyph_names(): OK
$ fontbakery-check.py upstream-ttx Pecita.ttf.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): FAIL
$ mv /home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita.ttf.ttx /home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita-Book.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): OK
bakery_lint.tests.upstream.test_check_ttx_fontfamily_recommendations.TTX_FontFamilyNamingTest.test_ttx_family_naming_recommendation(): OK
bakery_lint.tests.upstream.test_glyphname_does_not_contain_disallowed_chars.TestGlyphNameDoesNotContainsDisallowedChars.test_glyphname_does_not_contain_disallowed_chars(): FAIL
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_epar_in_keys(): FAIL
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_os2_in_keys(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_ttx_doesnt_contain_duplicate_glyphs(): OK
$ fontbakery-check.py upstream-ttx Pecita.otf.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): FAIL
$ mv /home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita.otf.ttx /home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita-Book.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): OK
bakery_lint.tests.upstream.test_check_ttx_fontfamily_recommendations.TTX_FontFamilyNamingTest.test_ttx_family_naming_recommendation(): OK
bakery_lint.tests.upstream.test_glyphname_does_not_contain_disallowed_chars.TestGlyphNameDoesNotContainsDisallowedChars.test_glyphname_does_not_contain_disallowed_chars(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_epar_in_keys(): FAIL
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_os2_in_keys(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_ttx_doesnt_contain_duplicate_glyphs(): OK
### (4 of 6) Convert sources to TTF
$ ttx -d /home/travis/build/fontdirectory/pecita/builds/build /home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita-Book.ttx
$ fontbakery-build-font2ttf.py sources/Pecita-Book.otf Pecita-Book.ttf
The following table(s) in the font have been ignored by FontForge
  Ignoring 'DSIG' digital signature table
The glyph named Delta is mapped to U+0394.
But its name indicates it should be mapped to U+2206.
The glyph named Omega is mapped to U+03A9.
But its name indicates it should be mapped to U+2126.
The glyph named mu is mapped to U+03BC.
But its name indicates it should be mapped to U+00B5.
Success: Generated OpenType-TTF (/home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf)
Compiling "/home/travis/build/fontdirectory/pecita/builds/build/sources/Pecita-Book.ttx" to "/home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.otf"...
Parsing 'GlyphOrder' table...
Parsing 'head' table...
Parsing 'hhea' table...
Parsing 'maxp' table...
Parsing 'OS/2' table...
Parsing 'name' table...
Parsing 'cmap' table...
Parsing 'post' table...
Parsing 'CFF ' table...
Parsing 'FFTM' table...
Parsing 'GDEF' table...
Parsing 'GPOS' table...
Parsing 'GSUB' table...
Parsing 'hmtx' table...
Parsing 'DSIG' table...
strippedname:/home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.otf
### Test Pecita-Book.ttf
$ fontbakery-check.py result Pecita-Book.ttf
bakery_lint.tests.downstream.test_check_license_included.CheckLicenseIncluded.test_license_included_in_font_names(): OK
bakery_lint.tests.downstream.test_check_names_same_across_platforms.CheckNamesSameAcrossPlatforms.test_check_names_same_across_platforms(): OK
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
$ fontbakery-fix-glyph-private-encoding.py --autofix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.fix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
bakery_lint.tests.downstream.test_check_full_font_name_begins_with_family_name.CheckFullFontNameBeginsWithFamilyName.test_check_full_font_name_begins_with_family_name(): OK
bakery_lint.tests.downstream.test_check_panose_identification.CheckPanoseIdentification.test_check_panose_identification(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckStyleNameRecommendation.test_check_stylename_is_under_recommendations(): FAIL
$ fontbakery-fix-opentype-names.py /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.fix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckStyleNameRecommendation.test_check_stylename_is_under_recommendations(): FAIL
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFamilyNameRecommendation.test_check_opentype_familyname(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTStyleNameRecommendation.test_check_opentype_stylename(): FAIL
$ fontbakery-fix-opentype-names.py /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.fix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTStyleNameRecommendation.test_check_opentype_stylename(): FAIL
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFullNameRecommendation.test_check_opentype_fullname(): OK
bakery_lint.tests.downstream.test_check_os2_width_class.CheckOS2WidthClass.test_check_os2_width_class(): OK
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): FAIL
$ fontbakery-fix-gasp.py --set=15 /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.fix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): OK
$ fontbakery-fix-gasp.py --set=15 /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.fix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
bakery_lint.tests.downstream.test_check_upm_heights_less_120.TestCheckUPMHeightsLess120.test_check_upm_heigths_less_120(): FAIL
bakery_lint.tests.downstream.test_check_fontname_matches_macstyle.CheckFontNameEqualToMacStyleFlags.test_fontname_is_equal_to_macstyle(): FAIL
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalLinegapMetrics.test_metrics_linegaps_are_zero(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalAscentMetrics.test_metrics_ascents_equal_bbox(): FAIL
$ fontbakery-fix-vertical-metrics.py --autofix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.fix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ fontbakery-fix-vertical-metrics.py /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
Parameter              Pecita-Book.ttf    
ymax                   892                
hhea.ascent            892                
OS/2.sTypoAscender     892                
OS/2.usWinAscent       892                
ymin                   -342               
hhea.descent           -342               
OS/2.sTypoDescender    -342               
OS/2.usWinDescent      342                
hhea.lineGap           0                  
OS/2.sTypoLineGap      0                  
hhea total             1234               
typo total             1234               
win total              1234               
UPM:Heights            1000:1234          
UPM:Heights %          123 %              


bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalAscentMetrics.test_metrics_ascents_equal_bbox(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalDescentMetrics.test_metrics_descents_equal_bbox(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFsTypeIsNotSet.test_is_fstype_not_set(): OK
$ fontbakery-fix-fstype.py --autofix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.fix /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_em_is_1000(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_font_is_font(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_latin_file_exists(): FAIL
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_menu_file_exists(): FAIL
bakery_lint.tests.downstream.test_check_glyf_table_length.CheckGlyfTableLength.test_check_glyf_table_length(): FAIL
bakery_lint.tests.downstream.test_check_nbsp_width_matches_sp_width.CheckNbspWidthMatchesSpWidth.test_check_nbsp_width_matches_sp_width(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_euro(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_nbsp(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_space(): OK
bakery_lint.tests.downstream.test_check_italic_angle_agreement.CheckItalicAngleAgreement.test_check_italic_angle_agreement(): OK
bakery_lint.tests.downstream.test_check_hmtx_hhea_max_advance_width_agreement.CheckHmtxHheaMaxAdvanceWidthAgreement.test_check_hmtx_hhea_max_advance_width_agreement(): OK
bakery_lint.tests.downstream.test_check_magic_prep_code.CheckMagicPREPByteCode.test_prep_magic_code(): FAIL
The following table(s) in the font have been ignored by FontForge
  Ignoring 'DSIG' digital signature table
The glyph named Delta is mapped to U+0394.
But its name indicates it should be mapped to U+2206.
The glyph named Omega is mapped to U+03A9.
But its name indicates it should be mapped to U+2126.
The glyph named mu is mapped to U+03BC.
But its name indicates it should be mapped to U+00B5.
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_unicode_codepoints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_flipped_reference_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_anchors(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_extrema_in_glyphs(): FAIL
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_overlapped_hints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_integer_aligned(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_not_too_far_apart(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_hints_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_referenced_glyphs_are_present(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_glyph_names(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_length_instructions(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_glyph_intersect(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_open_contours(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_wrong_direction_in_glyphs(): OK
bakery_lint.tests.downstream.test_names_are_ascii_only.CheckNamesAreASCIIOnly.test_check_names_are_ascii_only(): OK
bakery_lint.tests.downstream.test_check_font_tables.CheckFontHasDsigTable.test_check_font_has_dsig_table(): OK
bakery_lint.tests.downstream.test_check_font_tables.CheckFontHasNotKernTable.test_no_kern_table_exists(): OK
bakery_lint.tests.downstream.test_gpos_table_has_kerning_info.CheckGposTableHasKerningInfo.test_gpos_table_has_kerning_info(): FAIL
bakery_lint.tests.downstream.test_check_no_problematic_formats.CheckNoProblematicFormats.test_check_no_problematic_formats(): OK
bakery_lint.tests.downstream.test_check_unused_glyph_data.CheckUnusedGlyphData.test_check_unused_glyph_data(): ERROR
### Optimize TTF Pecita-Book.ttf
$ ls -l 'Pecita-Book.ttf'* # look at the size savings of that subset process
Pecita-Book.ttf.opt: 530576 bytes
Pecita-Book.ttf: 560824 bytes
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf.opt /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
### Autohint TTFs (ttfautohint) Pecita-Book.ttf
$ ttfautohint -l 7 -r 28 -G 50 -x 13 -w "G" /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf '/home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.autohint.ttf'

$ ls -l /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.*ttf # look at the size savings of that subset process
/home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf: 530576 bytes
/home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.autohint.ttf: 790688 bytes
$ mv /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.autohint.ttf /home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
### Subset TTFs (pyftsubset) Pecita-Book.ttf
$ pyftsubset Pecita-Book.latin
$ pyftsubset Pecita-Book.menu
strippedname:/home/travis/build/fontdirectory/pecita/builds/build/Pecita-Book.ttf
### (5 of 6) Generate METADATA.json (fontbakery-build-metadata.py)
$ fontbakery-build-metadata.py /home/travis/build/fontdirectory/pecita/builds/build
{} exists
FATAL: No *-Regular.ttf found to set family name!
WARNING: No *-Regular.ttf to calculate gzipped filesize!
Family Name: UNKNOWN
PS Name: Pecita
Full Name: Pecita
Style: normal
Weight: 400
Filename: Pecita-Book.ttf
Copyright: Copyright (c) 2009-2011, Philippe Cochy,,,(http://pecita.com),\nwith Reserved Font Name Pecita.
### (6 of 6) Run tests for METADATA.json
$ fontbakery-check.py metadata METADATA.json
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_latin(): FAIL
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_latin_ext(): FAIL
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_menu(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_description_is_more_than_500b(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_description_is_valid_html(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_daltonmaag_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontbureau_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontscom_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontshop_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontsmith_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_houseind_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_myfonts_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_veer_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_family_is_listed_in_gwf(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_atleast_latin_menu_subsets_exist(): OK
/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/tests/metadata_test.py:141: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
  self.assertTrue(designer in designers,
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_designer_exists_in_profiles_csv(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_items_dicts(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_key_list(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_no_dupes(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_has_unique_style_weight_pairs(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_keys(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_license(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_no_unknown_top_keys(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_subsets_key_list(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_top_keys_types(): OK
bakery_lint.tests.downstream.test_check_canonical_weights.CheckCanonicalWeights.test_check_canonical_weights(): ERROR
bakery_lint.tests.downstream.test_check_canonical_weights.CheckPostScriptNameMatchesWeight.test_postscriptname_contains_correct_weight(): FAIL
bakery_lint.tests.downstream.test_check_canonical_weights.CheckFontWeightSameAsInMetadata.test_font_weight_same_as_in_metadata(): ERROR
bakery_lint.tests.downstream.test_check_canonical_weights.CheckFullNameEqualCanonicalName.test_metadata_contains_current_font(): ERROR
bakery_lint.tests.downstream.test_check_canonical_filenames.CheckCanonicalFilenames.test_check_canonical_filenames(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.TestFontOnDiskFamilyEqualToMetadataJSON.test_font_on_disk_family_equal_in_metadata_json(): OK
bakery_lint.tests.downstream.test_metadata_agreements.TestPostScriptNameInMetadataEqualFontOnDisk.test_postscriptname_in_metadata_equal_to_font_on_disk(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_font_name_matches_family(): ERROR
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_family_values_are_all_the_same(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_filename_matches_postscriptname(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_font_have_regular(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fonts_fields_have_fontname(): ERROR
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fullname_is_equal_to_internal_font_fullname(): ERROR
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fullname_matches_postScriptName(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_regular_is_400(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_regular_is_normal(): FAIL
bakery_lint.tests.downstream.test_check_subsets_exists.CheckSubsetsExist.test_check_subsets_exists(): FAIL
bakery_lint.tests.downstream.test_check_monospace_agreements.CheckMonospaceAgreement.test_check_monospace_agreement(): OK
bakery_lint.tests.downstream.test_check_canonical_styles.CheckCanonicalStyles.test_check_canonical_styles(): ERROR
bakery_lint.tests.downstream.test_check_familyname_matches_fontnames.CheckFamilyNameMatchesFontNames.test_check_familyname_matches_fontnames(): OK
bakery_lint.tests.downstream.test_check_font_name_not_in_camelcase.CheckFontNameNotInCamelCase.test_fontname_not_in_camel_case(): OK
bakery_lint.tests.downstream.test_check_metadata_matches_nametable.CheckMetadataMatchesNameTable.test_check_metadata_matches_nametable(): ERROR
bakery_lint.tests.downstream.test_check_files_menu_agreements.CheckFontsMenuAgreements.test_menu_file_agreement(): FAIL
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_encodings_of_glyphs_across_family(): ERROR
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_names_of_glyphs_across_family(): ERROR
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_number_of_glyphs_across_family(): ERROR
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_copyrighttxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_description_exists(): OK
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_fontlogtxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_licensetxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_metadata_style_matches_names.CheckItalicStyleMatchesMacStyle.test_check_italic_style_matches_names(): OK
bakery_lint.tests.downstream.test_check_metadata_style_matches_names.CheckNormalStyleMatchesMacStyle.test_check_normal_style_matches_names(): ERROR
bakery_lint.tests.downstream.test_check_metadata_fields.CheckMetadataFields.test_check_metadata_fields(): OK
bakery_lint.tests.downstream.test_check_menu_contains_proper_glyphs.CheckMenuSubsetContainsProperGlyphs.test_check_menu_contains_proper_glyphs(): ERROR
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_contains_correct_rfn(): OK
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_is_consistent_across_family(): OK
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_matches_pattern(): OK
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_metadata_copyright_size(): OK
{
  "name": "Pecita", 
  "designer": "Phillipe Cochy", 
  "license": "OFL", 
  "visibility": "Sandbox", 
  "category": "Handwriting", 
  "size": 507313, 
  "fonts": [
    {
      "name": "UNKNOWN", 
      "postScriptName": "Pecita", 
      "fullName": "Pecita", 
      "style": "normal", 
      "weight": 400, 
      "filename": "Pecita-Book.ttf", 
      "copyright": "Copyright (c) 2009-2011, Philippe Cochy,,,(http://pecita.com),\nwith Reserved Font Name Pecita."
    }
  ], 
  "subsets": [
    "latin", 
    "menu"
  ], 
  "dateAdded": "2012-05-09"
}
